{"Category":"JSON Schema","SubCategory":"Address Schema","Task":"Create a JSON schema representing an address with properties for post office box, street address, locality, region, postal code, and country name. The schema should enforce that locality, region, and country name are required, and if post office box or extended address is provided, street address must also be provided.","Schema": {"description": "An address similar to http://microformats.org/wiki/h-card", "type": "object", "properties": {"postOfficeBox": {"type": "string"}, "extendedAddress": {"type": "string"}, "streetAddress": {"type": "string"}, "locality": {"type": "string"}, "region": {"type": "string"}, "postalCode": {"type": "string"}, "countryName": {"type": "string"}}, "required": ["locality", "region", "countryName"], "dependentRequired": {"postOfficeBox": ["streetAddress"], "extendedAddress": ["streetAddress"]}}}
{"Category":"JSON Schema","SubCategory":"Blog Post Schema","Task":"Create a JSON schema representing a blog post with properties for title, content, published date, author, and tags. The schema should enforce that title, content, and author are required.","Schema": {"description": "A representation of a blog post", "type": "object", "required": ["title", "content", "author"], "properties": {"title": {"type": "string"}, "content": {"type": "string"}, "publishedDate": {"type": "string", "format": "date-time"}, "author": {"$ref": "https://example.com/user-profile.schema.json"}, "tags": {"type": "array", "items": {"type": "string"}}}}}
{"Category":"JSON Schema","SubCategory":"Calendar Event Schema","Task":"Create a JSON schema representing an event in a calendar with properties for start date, end date, summary, location, recurrence date, and category. The schema should enforce that start date and summary are required.","Schema": {"description": "A representation of an event", "type": "object", "required": ["startDate", "summary"], "properties": {"startDate": {"type": "string", "description": "Event starting time"}, "endDate": {"type": "string", "description": "Event ending time"}, "summary": {"type": "string"}, "location": {"type": "string"}, "url": {"type": "string"}, "duration": {"type": "string", "description": "Event duration"}, "recurrenceDate": {"type": "string", "description": "Recurrence date"}, "recurrenceRule": {"type": "string", "description": "Recurrence rule"}, "category": {"type": "string"}, "description": {"type": "string"}, "geo": {"$ref": "https://example.com/geographical-location.schema.json"}}}}
{"Category":"JSON Schema","SubCategory":"Device Type Schema","Task":"Create a JSON schema representing electronic devices with a property for device type. Depending on the device type (smartphone or laptop), enforce specific properties such as brand, model, and screen size for smartphones, and brand, model, processor, and RAM size for laptops.","Schema":{"type":"object","properties":{"deviceType":{"type":"string"}},"required":["deviceType"],"oneOf":[{"properties":{"deviceType":{"const":"smartphone"}},"$ref":"https://example.com/smartphone.schema.json"},{"properties":{"deviceType":{"const":"laptop"}},"$ref":"https://example.com/laptop.schema.json"}]}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Create a JSON schema representing an ecommerce system with definitions for product and order schemas. Enforce properties such as name and price for products, and order ID and items for orders.","Schema":{"$defs":{"product":{"$anchor":"ProductSchema","type":"object","properties":{"name":{"type":"string"},"price":{"type":"number","minimum":0}}},"order":{"$anchor":"OrderSchema","type":"object","properties":{"orderId":{"type":"string"},"items":{"type":"array","items":{"$ref":"#ProductSchema"}}}}}}}
{"Category":"JSON Schema","SubCategory":"Geographical Location Schema","Task":"Create a JSON schema representing geographical coordinates with latitude and longitude values within specified ranges.","Schema":{"title":"Longitude and Latitude Values","description":"A geographical coordinate.","required":["latitude","longitude"],"type":"object","properties":{"latitude":{"type":"number","minimum":-90,"maximum":90},"longitude":{"type":"number","minimum":-180,"maximum":180}}}}
{"Category":"JSON Schema","SubCategory":"Minimum Viable Schema","Task":"Create a simple JSON schema with properties for person's first name, last name and age.","Schema":{"title":"Person","type":"object","properties":{"firstName":{"type":"string","description":"The person's first name."},"lastName":{"type":"string","description":"The person's last name."},"age":{"description":"Age in years which must be equal to or greater than zero.","type":"integer","minimum":0}}}}
{"Category":"JSON Schema","SubCategory":"Array Validation","Task":"Create a JSON schema to validate an array of strings and an array of objects.","Schema":{"description":"Array validation","type":"object","properties":{"fruits":{"type":"array","items":{"type":"string"}},"vegetables":{"type":"array","items":{"$ref":"#/$defs/veggie"}}},"$defs":{"veggie":{"type":"object","required":["veggieName","veggieLike"],"properties":{"veggieName":{"type":"string","description":"The name of the vegetable."},"veggieLike":{"type":"boolean","description":"Do I like this vegetable?"}}}}}}
{"Category":"JSON Schema","SubCategory":"Enumeration","Task": "Create a JSON schema to allow integer, string, null, and array data types.", "Schema": {"title": "Enumerated Values", "type": "object", "properties": {"data": {"oneOf": [{"type": "integer"}, {"type": "string"}, {"type": "null"}, {"type": "array", "items": {"type": "integer"}}]}}}}
{"Category":"JSON Schema","SubCategory":"Regex Pattern","Task":"Create a JSON schema to validate a code string against a regex pattern.","Schema":{"title":"Regular Expression Pattern","type":"object","properties":{"code":{"type":"string","pattern":"^[A-Z]{3}-\\d{3}$"}}}}
{"Category":"JSON Schema","SubCategory":"Complex Object","Task":"Create a JSON schema for a complex object with nested properties and array.","Schema":{"title":"Complex Object","type":"object","properties":{"name":{"type":"string"},"age":{"type":"integer","minimum":0},"address":{"type":"object","properties":{"street":{"type":"string"},"city":{"type":"string"},"state":{"type":"string"},"postalCode":{"type":"string","pattern":"\\d{5}"}},"required":["street","city","state","postalCode"]},"hobbies":{"type":"array","items":{"type":"string"}}},"required":["name","age"]}}
{"Category":"JSON Schema","SubCategory":"Dependent Required","Task":"Create a JSON schema with dependent required validation.","Schema":{"title":"Conditional Validation with dependentRequired","type":"object","properties":{"foo":{"type":"boolean"},"bar":{"type":"string"}},"dependentRequired":{"foo":["bar"]}}}
{"Category":"JSON Schema","SubCategory":"Dependent Schemas","Task":"Create a JSON schema with dependent schemas for conditional validation.","Schema":{"title":"Conditional Validation with dependentSchemas","type":"object","properties":{"foo":{"type":"boolean"},"propertiesCount":{"type":"integer","minimum":0}},"dependentSchemas":{"foo":{"required":["propertiesCount"],"properties":{"propertiesCount":{"minimum":7}}}}}}
{"Category":"JSON Schema","SubCategory":"Conditional Validation","Task":"Create a JSON schema with if-else conditions to apply different validations.","Schema":{"title":"Conditional Validation with If-Else","type":"object","properties":{"isMember":{"type":"boolean"},"membershipNumber":{"type":"string"}},"required":["isMember"],"if":{"properties":{"isMember":{"const":"true"}}},"then":{"properties":{"membershipNumber":{"type":"string","minLength":10,"maxLength":10}}},"else":{"properties":{"membershipNumber":{"type":"string","minLength":15}}}}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"Creating the fstab schema","Task":"Build a JSON Schema that mirrors the structure of an /etc/fstab file.","Schema":{"$id":"https://example.com/fstab","$schema":"https://json-schema.org/draft/2020-12/schema","type":"object","required":["/"],"properties":{"/":{}},"patternProperties":{"^(/[^/]+)+$":{}},"additionalProperties":"false"}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"Starting the entry schema","Task":"Define a JSON Schema for an fstab entry.","Schema":{"$id":"https://example.com/entry-schema","$schema":"https://json-schema.org/draft/2020-12/schema","description":"JSON Schema for an fstab entry","type":"object","required":["storage"],"properties":{"storage":{"type":"object","oneOf":[{"$ref":"#/definitions/diskDevice"},{"$ref":"#/definitions/diskUUID"},{"$ref":"#/definitions/nfs"},{"$ref":"#/definitions/tmpfs"}]}},"$defs":{"diskDevice":{},"diskUUID":{},"nfs":{},"tmpfs":{}}}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"Constraining an entry","Task":"Extend the entry schema with constraints for properties like fstype, options, and readonly.","Schema":{"$id":"https://example.com/entry-schema","$schema":"https://json-schema.org/draft/2020-12/schema","description":"JSON Schema for an fstab entry","type":"object","required":["storage"],"properties":{"storage":{},"fstype":{"enum":["ext3","ext4","btrfs"]},"options":{},"readonly":{"type":"boolean"}},"$defs":{}}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"Creating the fstab schema","Task":"Build a JSON Schema that mirrors the structure of an /etc/fstab file.","Schema":{"$id":"https://example.com/fstab","$schema":"https://json-schema.org/draft/2020-12/schema","type":"object","required":["/"],"properties":{"/":{}},"patternProperties":{"^(/[^/]+)+$":{}},"additionalProperties":"false"}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"The diskUUID definition","Task":"Define JSON Schema for diskUUID.","Schema":{"diskUUID":{"properties":{"type":{"enum":["disk"]},"label":{"type":"string","pattern":"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"}},"required":["type","label"],"additionalProperties":"false"}}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"The nfs definition","Task":"Define JSON Schema for nfs.","Schema":{"nfs":{"properties":{"type":{"enum":["nfs"]},"remotePath":{"type":"string","pattern":"^(/[^/]+)+$"},"server":{"type":"string","oneOf":[{"format":"hostname"},{"format":"ipv4"},{"format":"ipv6"}]}},"required":["type","server","remotePath"],"additionalProperties":"false"}}}
{"Category":"Modeling a file system with JSON Schema","SubCategory":"The tmpfs definition","Task":"Define JSON Schema for tmpfs.","Schema":{"tmpfs":{"properties":{"type":{"enum":["tmpfs"]},"sizeInMB":{"type":"integer","minimum":16,"maximum":512}},"required":["type","sizeInMB"],"additionalProperties":"false"}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Create a JSON schema representing an ecommerce system with definitions for product and order schemas. Enforce properties such as name and price for products, and order ID and items for orders.","Schema":{"$defs":{"product":{"$anchor":"ProductSchema","type":"object","properties":{"name":{"type":"string"},"price":{"type":"number","minimum":0}}},"order":{"$anchor":"OrderSchema","type":"object","properties":{"orderId":{"type":"string"},"items":{"type":"array","items":{"$ref":"#ProductSchema"}}}}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Generate a JSON object representing a product with properties including name and price.","Schema":{"type":"object","properties":{"name":{"type":"string"},"price":{"type":"number","minimum":0}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Create a JSON object for an order with properties such as order ID and items.","Schema":{"type":"object","properties":{"orderId":{"type":"string"},"items":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string"},"price":{"type":"number","minimum":0}}}}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Develop a JSON object for a customer profile with properties like name, email, and shipping address.","Schema":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"},"shippingAddress":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Construct a JSON object for a shopping cart, including properties like items, quantities, and total price.","Schema":{"type":"object","properties":{"items":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string"},"price":{"type":"number","minimum":0}}}},"quantities":{"type":"array","items":{"type":"number","minimum":0}},"totalPrice":{"type":"number","minimum":0}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Design a JSON object for a product category with properties such as category ID and name.","Schema":{"type":"object","properties":{"categoryId":{"type":"string"},"name":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Generate a JSON object representing a discount coupon with properties like code, discount percentage, and expiration date.","Schema":{"type":"object","properties":{"code":{"type":"string"},"discountPercentage":{"type":"number","minimum":0,"maximum":100},"expirationDate":{"type":"string","format":"date"}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Create a JSON object for a user review of a product, including properties such as rating, comment, and timestamp.","Schema":{"type":"object","properties":{"rating":{"type":"number","minimum":1,"maximum":5},"comment":{"type":"string"},"timestamp":{"type":"string","format":"date-time"}}}}
{"Category":"JSON Schema","SubCategory":"Ecommerce System Schema","Task":"Develop a JSON object for a wishlist, including properties like user ID and array of product IDs.","Schema":{"type":"object","properties":{"userId":{"type":"string"},"productIds":{"type":"array","items":{"type":"string"}}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Create a JSON schema representing a patient's health record, including properties such as patientName, dateOfBirth, bloodType, allergies, conditions, medications, procedures, ICD codes, CPT codes, NDC, SNOMED, and emergencyContact.","Schema":{"type":"object","required":["patientName","dateOfBirth","bloodType"],"properties":{"patientName":{"type":"string"},"dateOfBirth":{"type":"string","format":"date"},"bloodType":{"type":"string"},"allergies":{"type":"array","items":{"type":"string"}},"conditions":{"type":"array","items":{"type":"string"}},"medications":{"type":"array","items":{"type":"string"}},"procedures":{"type":"array","items":{"type":"string"}},"icdCodes":{"type":"array","items":{"type":"string"}},"cptCodes":{"type":"array","items":{"type":"string"}},"ndc":{"type":"string"},"snomed":{"type":"string"},"emergencyContact":{"$ref":"https://example.com/user-profile.schema.json"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Generate a JSON object representing a patient's health record with properties including patientName, dateOfBirth, bloodType, allergies, conditions, medications, procedures, ICD codes, CPT codes, NDC, SNOMED, and emergencyContact.","Schema":"type":"object","required":["patientName","dateOfBirth","bloodType"],"properties":{"patientName":{"type":"string"},"dateOfBirth":{"type":"string","format":"date"},"bloodType":{"type":"string"},"allergies":{"type":"array","items":{"type":"string"}},"conditions":{"type":"array","items":{"type":"string"}},"medications":{"type":"array","items":{"type":"string"}},"procedures":{"type":"array","items":{"type":"string"}},"icdCodes":{"type":"array","items":{"type":"string"}},"cptCodes":{"type":"array","items":{"type":"string"}},"ndc":{"type":"string"},"snomed":{"type":"string"},"emergencyContact":{"$ref":"https://example.com/user-profile.schema.json"}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Create a JSON object for storing patient allergies, with properties like allergyName, severity, and associated ICD codes.","Schema":{"type":"object","properties":{"allergyName":{"type":"string"},"severity":{"type":"string"},"icdCodes":{"type":"array","items":{"type":"string"}}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Develop a JSON schema for representing a medical condition with properties such as conditionName, diagnosisDate, treatment, and associated ICD codes.","Schema":{"type":"object","properties":{"conditionName":{"type":"string"},"diagnosisDate":{"type":"string","format":"date"},"treatment":{"type":"string"},"icdCodes":{"type":"array","items":{"type":"string"}}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Construct a JSON object representing a medication, including properties like medicationName, dosage, frequency, NDC, and associated SNOMED.","Schema":{"type":"object","properties":{"medicationName":{"type":"string"},"dosage":{"type":"string"},"frequency":{"type":"string"},"ndc":{"type":"string"},"snomed":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Design a JSON object for an emergency contact profile, including properties such as contactName, relationship, phone, email, and any relevant ICD codes.","Schema":{"type":"object","properties":{"contactName":{"type":"string"},"relationship":{"type":"string"},"phone":{"type":"string"},"email":{"type":"string"},"icdCodes":{"type":"array","items":{"type":"string"}}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Generate a JSON object representing a patient's medical history, including properties like previous surgeries, vaccinations, family medical history, ICD codes, and CPT codes.","Schema":{"type":"object","properties":{"previousSurgeries":{"type":"array","items":{"type":"string"}},"vaccinations":{"type":"array","items":{"type":"string"}},"familyMedicalHistory":{"type":"array","items":{"type":"string"}},"icdCodes":{"type":"array","items":{"type":"string"}},"cptCodes":{"type":"array","items":{"type":"string"}}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Create a JSON object for recording vital signs, including properties like temperature, blood pressure, heart rate, and any associated SNOMED.","Schema":{"type":"object","properties":{"temperature":{"type":"string"},"bloodPressure":{"type":"string"},"heartRate":{"type":"string"},"snomed":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Develop a JSON schema for representing a doctor's prescription, including properties such as patientID, medication, dosage, instructions, and any relevant NDC.","Schema":{"type":"object","properties":{"patientID":{"type":"string"},"medication":{"type":"string"},"dosage":{"type":"string"},"instructions":{"type":"string"},"ndc":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Construct a JSON object representing a laboratory test result, including properties like testType, result, date, and any associated SNOMED.","Schema":{"type":"object","properties":{"testType":{"type":"string"},"result":{"type":"string"},"date":{"type":"string","format":"date"},"snomed":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Create a JSON schema representing a drug with properties including active ingredient, administration route, precautions related to alcohol consumption, dosage form, and interactions with other drugs.","Schema":{"$id":"https://schema.org/Drug","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing a drug","type":"object","properties":{"activeIngredient":{"type":"string"},"administrationRoute":{"type":"string"},"precautionsAlcohol":{"type":"string"},"dosageForm":{"type":"string"},"interactions":{"type":"array","items":{"$ref":"#Drug"}}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Develop a JSON schema for representing a drug strength with properties such as dosage strength value and unit.","Schema":{"$id":"https://schema.org/DrugStrength","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug strength","type":"object","properties":{"value":{"type":"number"},"unit":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Design a JSON schema for representing drug dose schedules for a given population, including observed, recommended, or maximum dose.","Schema":{"$id":"https://schema.org/DoseSchedule","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug dose schedules","type":"object","properties":{"population":{"type":"string"},"observedDose":{"$ref":"#DrugStrength"},"recommendedDose":{"$ref":"#DrugStrength"},"maximumDose":{"$ref":"#DrugStrength"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Construct a JSON schema for representing drug classes with properties such as class name.","Schema":{"$id":"https://schema.org/DrugClass","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug classes","type":"object","properties":{"className":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Develop a JSON schema representing health insurance plans that cover a drug with properties such as plan name and coverage details.","Schema":{"$id":"https://schema.org/HealthInsurancePlan","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing health insurance plans","type":"object","properties":{"planName":{"type":"string"},"coverageDetails":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Create a JSON schema for representing drug interactions with properties such as interacting drug name and impact.","Schema":{"$id":"https://schema.org/DrugInteraction","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug interactions","type":"object","properties":{"interactingDrugName":{"type":"string"},"impact":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Generate a JSON schema representing drug legal status with properties such as status code and description.","Schema":{"$id":"https://schema.org/DrugLegalStatus","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug legal status","type":"object","properties":{"statusCode":{"type":"string"},"description":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Develop a JSON schema for representing drug pregnancy categories with properties such as category code and description.","Schema":{"$id":"https://schema.org/DrugPregnancyCategory","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug pregnancy categories","type":"object","properties":{"categoryCode":{"type":"string"},"description":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Design a JSON schema for representing drug prescription status with properties such as status code and description.","Schema":{"$id":"https://schema.org/DrugPrescriptionStatus","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug prescription status","type":"object","properties":{"statusCode":{"type":"string"},"description":{"type":"string"}}}}
{"Category":"JSON Schema","SubCategory":"Healthcare System Schema","Task":"Create a JSON schema for representing drug overdose information with properties such as signs/symptoms, treatments, and emergency contact details.","Schema":{"$id":"https://schema.org/DrugOverdose","$schema":"https://json-schema.org/draft/2020-12/schema","description":"Schema for representing drug overdose information","type":"object","properties":{"signsSymptoms":{"type":"string"},"treatments":{"type":"string"},"emergencyContact":{"type":"string"}}}}
